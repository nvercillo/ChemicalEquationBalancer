package com.company;

import java.sql.SQLOutput;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class APIs {

    public static class StringAndInteger {
        public String element;
        public Integer elementNum;

        public StringAndInteger(String elements,
                                Integer elementNum) {
            this.element = elements;
            this.elementNum = elementNum;
        }
    }
    public static class Ranker {
        public StringAndInteger stringAndInteger;
        public int moleculeNum;

        public Ranker(StringAndInteger stringAndInteger,
                      int moleculeNum) {
            this.stringAndInteger = stringAndInteger;
            this.moleculeNum = moleculeNum;
        }
    }

    public static class TwoStrArr {
        public String[] a;
        public String[]b;

        public TwoStrArr(String[]a, String[]b){
            this.a = a;
            this.b = b;
        }
    }

    public static class IntLists2 {
        public List<Integer> capitalsIndex;
        public List<Integer> coefficientIndex;

        public IntLists2(List<Integer> capitalsIndex,
                         List<Integer> coefficientIndex) {
            this.capitalsIndex = capitalsIndex;
            this.coefficientIndex = coefficientIndex;
        }
    }

    public static List<String> uniqueElement (List<String> elementsList, String[] rxnArr) {
        List<String> uniqueElements = new ArrayList<>();
        List<String> holder = new ArrayList<>();

        for (int i=0; i<rxnArr.length; i++){
            holder.add(elementsList.get(i));
        }
        for (int j=0; j<holder.size(); j++) {
            String string = holder.get(j);
            List<String> elementwNumList = elementwNumParser(string, indexProducer(string).capitalsIndex);
            for (int i = 0; i < elementwNumList.size(); i++) {
                String element = elementInfoOneMole(elementwNumList.get(i)).element;
                if (uniqueElements.indexOf(element) == 0)
                    uniqueElements.add(element);
            }
        }
        return uniqueElements;
    }

    public static List<String> elementStrings(String[] rxnStrings, String[] prodStrings){
        List<String> strings = new ArrayList<>();
        for (int i=0; i<rxnStrings.length; i++){
            strings.add(rxnStrings[i]);
        }
        for (int i=0; i<prodStrings.length; i++){
            strings.add(prodStrings[i]);
        }
        return strings;
    }


    public static IntLists2 indexProducer (String oneElementString){
        String string = oneElementString;
        List<Integer> capitalsIndex = new ArrayList<>();
        List<Integer> coefficientIndex = new ArrayList<>();
        for (int i=0; i<oneElementString.length(); i++){
            if (Character.isUpperCase(string.charAt(i)))
                capitalsIndex.add(i);
            if (Character.isDigit(string.charAt(i)))
                coefficientIndex.add(i);
        }
        IntLists2 holder = new IntLists2(capitalsIndex, coefficientIndex);
        return holder;
    }

    public static List<String> elementwNumParser(String string, List<Integer> capitalsIndex) {
        List<String> elementwNumList = new ArrayList<>();

        for (int i = 0; i < capitalsIndex.size(); i++) {
            if (i == capitalsIndex.size() - 1) {
                elementwNumList.add(string.substring(capitalsIndex.get(i)));
            } else {
                elementwNumList.add(string.substring(capitalsIndex.get(i), capitalsIndex.get(i + 1)));
            }
        }
        return elementwNumList;
    }

    public static StringAndInteger elementInfoOneMole (String elementwNum){
        String string = elementwNum;
        List<Integer> digitIndex = new ArrayList<>();
        for (int i=0; i<string.length(); i++){
            if(Character.isDigit(string.charAt(i))){
                digitIndex.add(i);
                break;
            }
        }
        if (digitIndex.size() !=0){
            String element = string.substring(0,digitIndex.get(0));
            int elementNum = Integer.valueOf(string.substring(digitIndex.get(0)));
            StringAndInteger enn = new StringAndInteger(element, elementNum);
            return enn;
        } else {
            String element = string;
            int elementNum = 1;
            StringAndInteger enn = new StringAndInteger(element, elementNum);
            return enn;
        }
    }

    public static List<String> concatenatedList(List<List<String>> singleRxnElewNumsList) {
        List<String> concatinatedList = new ArrayList<>();
        for (int i=0; i<singleRxnElewNumsList.size(); i++) {
            for (int j=0; j<singleRxnElewNumsList.get(i).size(); j++) {
                concatinatedList.add(singleRxnElewNumsList.get(i).get(j));
            }
        }
        return concatinatedList;
    }
    public static List<Ranker> rankList(List<String> uniqueElements, List<StringAndInteger>elementInfo1) {
        List<Ranker> rankList = new ArrayList<>();
        for (int j=0; j<uniqueElements.size(); j++) {
            for (int i = 0; i < elementInfo1.size(); i++){
                if (elementInfo1.get(i).element.equals(uniqueElements.get(j))){
                    Ranker rank = new Ranker(elementInfo1.get(i), j);
                    rankList.add(rank);
                }
            }
        }
        return rankList;
    }

    //        C2H6 + O2 --> CO2 + H2O
    public static void main(String[] args) {
//        receiving and splitting data into elements
        Scanner scanner = new Scanner(System.in);
        String whole = scanner.nextLine();
        String[] eqnSplitter = whole.split(" --> ");
        String[] rxnStrings = eqnSplitter[0].split(" \\+ ");
        String[] prodStrings = eqnSplitter[1].split(" \\+ ");
        List<String> elementStrings = elementStrings(rxnStrings, prodStrings);
        List<List<String>> singleRxnElewNumsList = new ArrayList<>();
        List<StringAndInteger> elementInfoList = new ArrayList<>();
        List<String> uniqueElements = uniqueElement(elementStrings, rxnStrings);

//        using each string to further parse data, incorporating each function
        for (int i = 0; i < elementStrings.size(); i++) {
            String string = elementStrings.get(i);
            List<Integer> capitalIndex = indexProducer(string).capitalsIndex;
            List<Integer> coefficeintIndex = indexProducer(string).coefficientIndex;
            List<String> singleRxnElewNums = elementwNumParser(string, capitalIndex);
            singleRxnElewNumsList.add(singleRxnElewNums);
        }
        List<String> elementwNumList = concatenatedList(singleRxnElewNumsList);
        for (int i=0; i<elementwNumList.size(); i++){
            StringAndInteger elementInfoOneMole = elementInfoOneMole(elementwNumList.get(i));
            elementInfoList.add(elementInfoOneMole);
        }

        System.out.println(elementInfoList.get(0).element);
        List<Ranker> rankList = rankList(uniqueElements, elementInfoList);
        System.out.println(rankList.get(0).stringAndInteger.element);



//        List<Ranker> rankList = zeroPutterAtBeginning(zeroPutterAtEnd(rankList(uniqueElements, elementInfoList), uniqueElements),uniqueElements);
//        double[][] matrix = matrix(rankList, uniqueElements, elementStrings);
//        System.out.println(matrix);

    }
}

//            StringAndInteger el = elementAndNumbers(string);
//            System.out.println(el.elements);






//            for(int j=0; j<singleRxnMoleculeList.size(); j++){
//                String singleRxnMolecule = singleRxnMoleculeList.get(i);
//                List<StringAndInteger> singleElementInfo = elementParser(singleRxnMolecule);
//                System.out.println(singleElementInfo.get(0).elements);
//            }
















//    public static List<StringAndInteger> elementParser (String singleRxnMolecule) {
//        String string = singleRxnMolecule;
//        List<String> elementwNumList = elementwNumParser(string, indexProducer(string).capitalsIndex);
//        List<StringAndInteger> elementInfo = new ArrayList<>();
//        List<String> uniqueElements = new ArrayList<>();
//
//        for (int i = 0; i < elementwNumList.size(); i++) {
//            String element = elementAndNumbers(elementwNumList.get(i)).elements;
//            int elementNum = elementAndNumbers(elementwNumList.get(i)).elementNum;
//            StringAndInteger si = new StringAndInteger(element, elementNum);
//            elementInfo.add(si);
//            if (uniqueElements.indexOf(element) == 0)
//                uniqueElements.add(element);
//        }
//        return elementInfo;
//    }

//    public static List<StringAndInteger> elementInfoList(List<List<String>> elewNum4eachMoleList){
//        List<StringAndInteger> elementInfoList = new ArrayList<>();
//        for (int j=0; j<elewNum4eachMoleList.size(); j++){
//            for (int w=0; w<elewNum4eachMoleList.get(j).size(); w++){
//                String string = elewNum4eachMoleList.get(j).get(w);
//                List<Integer> digitIndex = new ArrayList<>();
//                for (int i = 0; i < string.length(); i++) {
//                    if (Character.isDigit(i)) {
//                        digitIndex.add(i);
//                    }
//                }
//                if (digitIndex.size() != 0) {
//                    String element = string.substring(0, digitIndex.get(0));
//                    int elementNum = Integer.parseInt(string.substring(digitIndex.get(0)));
//                    StringAndInteger enn = new StringAndInteger(element, elementNum);
//                    elementInfoList.add(enn);
//                } else {
//                    String element = string;
//                    int elementNum = 1;
//                    StringAndInteger enn = new StringAndInteger(element, elementNum);
//                    elementInfoList.add(enn);
//                }
//            }
//        }
//        return elementInfoList;
//    }
//
//
//
//    public static List<StringAndInteger> elementInfoOneMoleList (List<String> elementwNumList){
//        List<StringAndInteger> elementInfoOneMoleList = new ArrayList<>();
//        List<Integer> digitIndex = new ArrayList<>();
//        for (int j=0; j<elementwNumList.size(); j++ ){
//            String string = elementwNumList.get(j);
//            for (int i = 0; i < string.length(); i++) {
//                if (Character.isDigit(i)) {
//                    digitIndex.add(i);
//                }
//            }
//            if (digitIndex.size() != 0) {
//                String element = string.substring(0, digitIndex.get(0));
//                int elementNum = Integer.parseInt(string.substring(digitIndex.get(0)));
//                StringAndInteger enn = new StringAndInteger(element, elementNum);
//                elementInfoOneMoleList.add(enn);
//            } else {
//                String element = string;
//                int elementNum = 1;
//                StringAndInteger enn = new StringAndInteger(element, elementNum);
//                elementInfoOneMoleList.add(enn);
//            }
//        }
//
//        return elementInfoOneMoleList;
//    }
